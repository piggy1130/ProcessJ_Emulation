import std.*;

void philosopher(int id, chan<boolean>.write left,
		 chan<boolean>.write right) {
    while (true) {
        println(id + ": I am thinking");
        par {                // pick up forks
            left.write(true);   
            right.write(true);
        }
        jl_sleep(1000);
        println(id + ": I am eating-------------------------" + id);
        jl_sleep(1000);
        par {                // put down forks
            left.write(true);
            right.write(true);
        }
    }
}

// fork is a reserved word for now, so use Fork
void Fork(int i, chan<boolean>.read left,
	  chan<boolean>.read right) {
    boolean any;
    while (true) {
        alt {
            any = left.read(): {   // right phil picks up
                println(i + ": picked up from the right."); 
                any = left.read();   // right phil puts down
                println(i + ": put down from the right."); 
            }
            any = right.read(): {  // left phil picks up
                println(i + ": picked up from the left."); 
                any = right.read();  // left phil puts down
                println(i + ": put down from the left.");      
            }
        }
    }
}

void college() {    
    // I handcoded this for you - I didn't check I got
    // it right, so you may wanna check that yourself ;-)
    chan<boolean> left0, left1;
    chan<boolean> right0, right1;

    /*
    par {
        philosopher(0, left0.write, right0.write);
        philosopher(1, left1.write, right1.write);
        //philosopher(2, left2.write, right2.write);
        //philosopher(3, left3.write, right3.write);
        //philosopher(4, left4.write, right4.write);
        
        Fork(0, left0.read, right1.read);
        Fork(1, left1.read, right2.read);
        //Fork(1, left2.read, right3.read);
        //Fork(1, left3.read, right4.read);
        //Fork(2, left4.read, right0.read);
    }
    */

    par{
        philosopher(0, left0.write, right0.write);
        philosopher(1, left1.write, right1.write);
        Fork(0, left0.read, right1.read);
        Fork(1, left1.read, right0.read);
    }
}

public void main(string args[]) {
  college();
  // secureCollege(); 
}